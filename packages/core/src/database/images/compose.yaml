# Used to test database infrastructure (currently setup for master/slave replication)
# This should not be used in conjunction with the setup compose file
networks:
  database-network:
    driver: bridge

services:
  s3:
    image: localstack/localstack
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-west-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=testsecret
    volumes:
      - ./s3.sh:/etc/localstack/init/ready.d/s3.sh
    networks:
      - database-network

  backup:
    image: backup:latest
    build:
      context: ./backup
      dockerfile: Dockerfile
    env_file: "../../../../../.env"
    environment:
      - POSTGRES_DB=main
      - MASTER_HOST=images-masterdb-1
    volumes:
      - ./backup/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf
      - ../../../../../.certs/dev/ca/ca.crt:/etc/pgbackrest/ca.crt
      - ../../../../../.certs/dev/server/server.crt:/etc/pgbackrest/server.crt
      - ../../../../../.certs/dev/server/server.key:/etc/pgbackrest/server.key
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pgrep -af pgbackrest > /dev/null 2>&1"]
      interval: 1s
      retries: 10
    depends_on:
      s3:
        condition: service_healthy

  masterdb:
    image: masterdb:latest
    build:
      context: ./master
      dockerfile: Dockerfile
    env_file: "../../../../../.env"
    environment:
      - POSTGRES_DB=main
      - PGDATABASE=main
      - POSTGRES_TYPE=backup
    volumes:
      - ../../../../scripts/process_env.sh:/usr/bin/process_env.sh
      - ../main/setup/_init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../main/setup/roles.sql:/docker-entrypoint-initdb.d/roles.sql
      - ./master/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/tmp/postgresql/pg_hba.conf
      - ./master/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf
      - ../../../../../.certs/dev/ca/ca.crt:/etc/pgbackrest/ca.crt
      - ../../../../../.certs/dev/server/server.crt:/etc/pgbackrest/server.crt
      - ../../../../../.certs/dev/server/server.key:/etc/pgbackrest/server.key
      - ../../../../../.certs/dev/client/images-masterdb-1.key:/etc/pgbackrest/client.key
      - ../../../../../.certs/dev/client/images-masterdb-1.crt:/etc/pgbackrest/client.crt
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pgrep -af pgbackrest > /dev/null 2>&1"]
      interval: 1s
      retries: 10
    depends_on:
      backup:
        condition: service_healthy

  slavedb:
    image: slavedb:latest
    build:
      context: ./slave
      dockerfile: Dockerfile
    env_file: "../../../../../.env"
    environment:
      - POSTGRES_DB=main
      - PGDATABASE=main
      - POSTGRES_TYPE=backup
    volumes:
      - ../../../../scripts/process_env.sh:/usr/bin/process_env.sh
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/tmp/postgresql/pg_hba.conf
      - ./slave/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf
      - ../../../../../.certs/dev/ca/ca.crt:/etc/pgbackrest/ca.crt
      - ../../../../../.certs/dev/server/server.crt:/etc/pgbackrest/server.crt
      - ../../../../../.certs/dev/server/server.key:/etc/pgbackrest/server.key
      - ../../../../../.certs/dev/client/images-slavedb-1.key:/etc/pgbackrest/client.key
      - ../../../../../.certs/dev/client/images-slavedb-1.crt:/etc/pgbackrest/client.crt
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "user", "-d", "userdb"]
      interval: 1s
      retries: 10
    depends_on:
      masterdb:
        condition: service_healthy

  pgcat:
    image: ghcr.io/postgresml/pgcat:latest
    ports:
      - "6432:6432"
    volumes:
      - ./pgcat.toml:/etc/pgcat/pgcat.toml
    networks:
      - database-network
    depends_on:
      masterdb:
        condition: service_healthy
      slavedb:
        condition: service_healthy

  # essentially an empty container that makes sure the previous services are initialized
  ready:
    image: alpine:latest
    depends_on:
      pgcat:
        condition: service_started
