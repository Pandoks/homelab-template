# Used to test database infrastructure (currently setup for master/slave replication)
# This should not be used in conjunction with the setup compose file
networks:
  database-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

services:
  masterdb:
    image: masterdb:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    environment:
      # used to setup database
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=userdb
      # used to connect to the database
      - PGUSER=user
      - PGDATABASE=userdb
      - PGPASSWORD=password
    volumes:
      - ../main/setup/_init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../main/setup/roles.sql:/docker-entrypoint-initdb.d/roles.sql
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "user", "-d", "userdb"]
      interval: 1s
      retries: 10

  slavedb:
    image: slavedb:latest
    build:
      context: .
      dockerfile: Dockerfile.slave
    ports:
      - "5433:5432"
    environment:
      # used to setup database
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=userdb
      # used to connect to the database
      - PGUSER=user
      - PGDATABASE=userdb
      - PGPASSWORD=password
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "user", "-d", "userdb"]
      interval: 1s
      retries: 10
    depends_on:
      masterdb:
        condition: service_healthy

  # pgcat:
  #   image: ghcr.io/postgresml/pgcat:latest
  #   ports:
  #     - "6432:6432"

  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080

  # essentially an empty container that makes sure the previous services are initialized
  ready:
    image: alpine:latest
    depends_on:
      masterdb:
        condition: service_healthy
      slavedb:
        condition: service_healthy
